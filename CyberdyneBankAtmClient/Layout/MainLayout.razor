@using CyberdyneBankAtmClient.Services
@inherits LayoutComponentBase
@inject NotificationService NotificationService
<div class="page">
    <main>
        @if (!string.IsNullOrEmpty(NotificationMessage))
        {
            <div style="
        position: fixed;
        top: 30px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 2000;
        min-width: 320px;
        max-width: 90vw;
        box-shadow: 0 8px 32px rgba(0,0,0,0.25);"
                 class="alert @NotificationCss alert-dismissible fade show"
                 role="alert">
                @NotificationMessage
                <button type="button" class="btn-close" aria-label="Close" @onclick="()=> NotificationMessage = null"></button>
            </div>
        }
        <!-- Cyberdyne Banner -->
        <div class="cyberdyne-banner d-flex align-items-center justify-content-between p-3 mb-4">
            <div class="cyberdyne-slogan">
                Cyberdyne, where your funds become self-aware. ™
            </div>
            <div>
                <img src="Cyberdyne.png" alt="Cyberdyne Logo" style="height: 48px;"/>
            </div>
        </div>
        <!-- End Cyberdyne Banner -->

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<style>
    .cyberdyne-banner {
        background: #23272f;
        color: #fff;
        border-bottom: 4px solid #d32f2f;
        box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        font-size: 1.2rem;
        font-weight: 500;
    }
    .cyberdyne-slogan {
        font-size: 1.4rem;
        font-weight: bold;
    }
</style>

@code {
    private string NotificationMessage;
    private string NotificationCss = "alert-danger";
    private CancellationTokenSource _cts;

    protected override void OnInitialized()
    {
        NotificationService.OnNotify += ShowNotification;
    }

    private async void ShowNotification(string message, string css, int duration)
    {
        NotificationCss = css;
        NotificationMessage = message;
        StateHasChanged();

        _cts?.Cancel(); // Cancel any prior timeout
        _cts = new CancellationTokenSource();

        try
        {
            await Task.Delay(duration, _cts.Token);
            NotificationMessage = null;
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
            // Notification was closed manually, do nothing
        }
    }
}