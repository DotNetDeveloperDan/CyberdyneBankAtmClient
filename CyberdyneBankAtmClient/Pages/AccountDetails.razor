@page "/accountdetails/{AccountId:int}"
@using CyberdyneBankAtmClient.Models
@using CyberdyneBankAtmClient.Services
@inject IAccountApiService Api
@inject NavigationManager Nav


<h3>Account Details</h3>

@if (Account == null)
{
    <p>Loading...</p>
}
else
{
    <p><b>Account Id:</b> @Account.AccountId</p>
    <p><b>Account Type:</b> @Account.AccountType</p>
    <p><b>Balance:</b> @Account.Balance.ToString("C")</p>
}

@if (Transactions == null)
{
    <p>Loading transactions...</p>
}
else if (Transactions.Length == 0)
{
    <p>No transactions for this account.</p>
}
else
{
    <h4>Transaction History</h4>
    <table class="table">
        <thead>
        <tr>
            <th>Transaction Id</th>
            <th>Date</th>
            <th>Type</th>
            <th>Amount</th>
            <th>Description</th>
            <th>Accnt. Balance</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var tx in TransactionList)
        {
            <tr>
                <td>@tx.TransactionId</td>
                <td>@tx.CreatedOn.ToLocalTime().ToString("g")</td>
                <td>@tx.TransactionType</td>
                <td>@tx.Amount.ToString("C")</td>
                <td>@tx.Description</td>
                <td>@tx.CurrentAccountBalance.GetValueOrDefault().ToString("C")</td>
            </tr>
        }
        </tbody>
    </table>
    <button class="btn btn-secondary mb-3" @onclick="GoBack">
        ← Back to Accounts
    </button>
}

@code {
    [Parameter]
    public int AccountId { get; set; }

    public AccountDto? Account { get; set; }
    public TransactionDto[]? Transactions { get; set; }
    public List<TransactionDto> TransactionList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get account details (including balance)
        Account = await Api.GetAccountAsync(AccountId);
        // Or, if your API supports it: Account = await Api.GetAccountAsync(AccountId);

        // Get transactions for this account
        Transactions = await Api.GetTransactionsAsync(AccountId);

        TransactionList = Transactions.OrderByDescending(t => t.CreatedOn).ToList();
    }

    private void GoBack()
    {
        Nav.NavigateTo("/accounts");
    }
}