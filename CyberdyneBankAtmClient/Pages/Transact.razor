@page "/transact/{AccountId:int}/{TransactType:int}"
@using CyberdyneBankAtmClient.Enums
@using CyberdyneBankAtmClient.Models
@using CyberdyneBankAtmClient.Services
@using Blazorise
@inject IAccountApiService Api
@inject NavigationManager Nav
@inject NotificationService NotificationService


<h3>Make a @Type</h3>

@if (Account == null)
{
    <p>Loading account...</p>
}
else
{
    <b>Account: @Account.AccountId</b>
    <br />
    <b>Current Balance: @Math.Round(Account.Balance, 2, MidpointRounding.AwayFromZero).ToString("C")</b>
    <br />
    <br />
    <div class="mb-3">
        <label class="form-label" for="amountInput"><b>Amount:</b></label>
        <NumericEdit ElementId="amountInput" TValue="decimal"
                     @bind-Value="Amount"
                     DisplayFormat="C2"
                     Min="0"
                     Max="1000000"
                     Placeholder="Enter amount (max. 1000000)"
                     Decimals="2"
                     Class="form-control" />
    </div>
   


  


    <div class="mb-3">
        <label class="form-label" for="descInput"><b>Description :</b></label>
        <input id="descInput" placeholder="@Type" class="form-control" @bind="Description" maxlength="255" />
    </div>
    <br />
    <br />

    <button class="btn btn-primary" @onclick="Submit" disabled="@(IsTransactionDisabled())">Submit</button>

    <br />
    <br />
}

<button class="btn btn-secondary mb-3" @onclick="GoBack">
    ← Back to Accounts
</button>

@code {
    [Parameter]
    public int AccountId { get; set; }

    [Parameter]
    public int TransactType { get; set; }

    private TransactionType Type;
    private string AmountString
    {
        get => Amount == 0 ? "" : Amount.ToString("N2");
        set
        {
            var cleaned = value.Replace("$", "").Replace(",", "").Trim();
            if (decimal.TryParse(cleaned, out var val))
                Amount = val;
            else
                Amount = 0;
        }
    }
    private decimal Amount { get; set; }
    private string Description;
    private AccountDto Account;

    protected override async Task OnInitializedAsync()
    {
        Account = await Api.GetAccountAsync(AccountId);
        Type = (TransactionType)TransactType;
    }

    private async Task Submit()
    {
        var request = new CreateTransactionRequest
            {
                AccountId = AccountId,
                Amount = Math.Round(Amount, 2, MidpointRounding.AwayFromZero),
                Type = Type,
                Description = string.IsNullOrEmpty(Description)?Type.ToString():Description
            };

        try
        {
            if (Type == TransactionType.Deposit)
            {
                await Api.DepositAsync(request);
                NotificationService.Show("Deposit was successful.", "alert-success");
            }

            else
            {
                await Api.WithdrawAsync(request);
                NotificationService.Show($"Withdraw was successful.", "alert-success");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Show("An error occurred.", "alert-danger");
        }

        Amount = 0;
        Description = Type.ToString();
        Account = await Api.GetAccountAsync(AccountId); // refresh balances
    }

    private bool IsTransactionDisabled()
    {

        return ((Account.Balance < Amount && Type == TransactionType.Withdraw) || Amount <= 0);
    }


    private void GoBack()
    {
        Nav.NavigateTo("/accounts");
    }
}