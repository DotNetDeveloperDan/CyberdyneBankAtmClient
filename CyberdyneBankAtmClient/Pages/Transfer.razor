@page "/transfer/{FromAccountId:int}"
@using CyberdyneBankAtmClient.Models
@using CyberdyneBankAtmClient.Services
@using Blazorise
@inject IAccountApiService Api
@inject NavigationManager Nav
@inject NotificationService NotificationService

<h3>Transfer Funds</h3>

@if (Accounts == null)
{
    <p>Loading accounts...</p>
}
else
{
    var fromAccount = Accounts.FirstOrDefault(a => a.AccountId == FromAccountId);

    <div class="mb-3">
        <label class="form-label"><b>From Account:</b></label>
        <input class="form-control" value="@($"{fromAccount?.AccountType.ToString() ?? "?"} ({fromAccount?.Balance.ToString("C") ?? "?"})")" disabled />
    </div>

    <div class="mb-3">
        <label class="form-label" for="toAccountSelect"><b>To Account:</b></label>
        <select id="toAccountSelect" class="form-select" @bind="ToAccountId">
            <option value="">Select account</option>
            @foreach (var acct in Accounts.Where(a => a.AccountId != FromAccountId))
            {
                <option value="@acct.AccountId">@acct.AccountType (@acct.Balance.ToString("C"))</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label class="form-label" for="amountInput"><b>Amount:</b></label>
        <NumericEdit ElementId="amountInput" TValue="decimal"
                     @bind-Value="Amount"
                     DisplayFormat="C2"
                     Min="0"
                     Max="1000000"
                     Placeholder="Enter amount (max. 1000000)"
                     Decimals="2"
                     Class="form-control" />
    </div>

    <div class="mb-3">
        <label class="form-label" for="descInput"><b>Description (optional):</b></label>
        <input id="descInput" class="form-control" @bind="Description" maxlength="255" />
    </div>

    <button class="btn btn-primary" @onclick="TransferFunds" disabled="@(IsTransferDisabled())">Transfer</button>
    <button class="btn btn-secondary ms-2" @onclick="GoBack">Cancel</button>
}

@code {
    [Parameter]
    public int FromAccountId { get; set; }
    private int ToAccountId;
    private decimal Amount;
    private string Description;
    private AccountDto[] Accounts;
    private string NotificationCss = "alert-danger";

    protected override async Task OnInitializedAsync()
    {
        Accounts = await Api.GetAccountsAsync();
    }

    private bool IsTransferDisabled()
    {
        var fromAccount = Accounts?.FirstOrDefault(a => a.AccountId == FromAccountId);
        return ToAccountId == 0 ||
               ToAccountId == FromAccountId ||
               Amount <= 0 ||
               fromAccount == null ||
               Amount > fromAccount.Balance;
    }

    private async Task TransferFunds()
    {
        try
        {
            var request = new CreateTransferRequest
                {
                    AccountId = FromAccountId,
                    RelatedAccountId = ToAccountId,
                    Amount = Math.Round(Amount, 2, MidpointRounding.AwayFromZero)
                };
            await Api.TransferAsync(request);

            NotificationService.Show("Transfer was successful.", "alert-success");
            Amount = 0;
            Description = string.Empty;

            Accounts = await Api.GetAccountsAsync(); // Refresh balances
        }
        catch (Exception ex)
        {
            NotificationService.Show("An error occurred.", "alert-danger");
        }
    }

    private void GoBack()
    {
        Nav.NavigateTo("/accounts");
    }
}
